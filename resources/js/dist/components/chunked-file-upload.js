function h(o){return{uploading:!1,uploadingFiles:[],uploadedFiles:[],error:null,state:o.state,abortControllers:new Map,updatingState:!1,config:{acceptedFileTypes:o.acceptedFileTypes||[],chunkSize:o.chunkSize||5*1024*1024,chunkUploadUrl:o.chunkUploadUrl,chunkDeleteUrl:o.chunkDeleteUrl,chunkCancelUrl:o.chunkCancelUrl,isChunked:o.isChunked||!1,isDisabled:o.isDisabled||!1,isMultiple:o.isMultiple||!1,maxFiles:o.maxFiles||1,maxParallelUploads:o.maxParallelUploads||3,maxSize:o.maxSize,minSize:o.minSize,placeholder:o.placeholder,statePath:o.statePath,uploadingMessage:o.uploadingMessage||"Uploading..."},init(){this.loadExistingFiles(),this.$watch("state",()=>this.loadExistingFiles()),this.setupDragAndDrop(),window.addEventListener("beforeunload",()=>this.cleanup())},loadExistingFiles(){if(!this.state||this.updatingState)return;let e=Array.isArray(this.state)?this.state:[this.state];(this.uploadedFiles.length===0||e.length!==this.uploadedFiles.length)&&(this.uploadedFiles=e.map((t,i)=>({key:this.generateFileKey(),name:t,size:0,url:`/storage/uploads/${t}`,type:null})))},setupDragAndDrop(){let e=this.$el,t=this.$el.querySelector(".fi-fo-file-upload-dropzone");!e||!t||(["dragenter","dragover","dragleave","drop"].forEach(i=>{e.addEventListener(i,this.preventDefaults,!1)}),["dragenter","dragover"].forEach(i=>{e.addEventListener(i,()=>this.highlight(t),!1)}),["dragleave","drop"].forEach(i=>{e.addEventListener(i,()=>this.unhighlight(t),!1)}),e.addEventListener("drop",this.handleDrop.bind(this),!1))},preventDefaults(e){e.preventDefault(),e.stopPropagation()},highlight(e){e.classList.add("drag-over")},unhighlight(e){e.classList.remove("drag-over")},handleDrop(e){let i=e.dataTransfer.files;this.handleFiles(Array.from(i))},handleFileSelect(e){let t=Array.from(e.target.files);this.handleFiles(t),e.target.value=""},handleFiles(e){if(e.length===0)return;this.error=null;let t=this.validateFiles(e);if(!t.valid){this.error=t.error;return}this.startUploads(e)},validateFiles(e){let t=this.uploadedFiles.length+e.length;if(this.config.maxFiles&&t>this.config.maxFiles)return{valid:!1,error:`Maximum ${this.config.maxFiles} files allowed. You have ${this.uploadedFiles.length} files and are trying to add ${e.length} more.`};for(let i of e){if(this.config.maxSize&&i.size>this.parseSize(this.config.maxSize))return{valid:!1,error:`File "${i.name}" (${this.formatFileSize(i.size)}) exceeds maximum size of ${this.config.maxSize}`};if(this.config.minSize&&i.size<this.parseSize(this.config.minSize))return{valid:!1,error:`File "${i.name}" (${this.formatFileSize(i.size)}) is smaller than minimum size of ${this.config.minSize}`};if(this.config.acceptedFileTypes.length>0&&!this.config.acceptedFileTypes.some(s=>s.includes("/")?s.endsWith("/*")?i.type.startsWith(s.slice(0,-1)):i.type===s:i.name.toLowerCase().endsWith(s.toLowerCase())))return{valid:!1,error:`File "${i.name}" is not an accepted file type. Accepted types: ${this.config.acceptedFileTypes.join(", ")}`}}return{valid:!0}},async startUploads(e){this.uploading=!0;let t=e.map(s=>({id:this.generateFileKey(),file:s,name:s.name,size:s.size,type:s.type,progress:0,status:"pending",speed:null,uploadedBytes:0,chunks:[],uploadedChunks:0,totalChunks:this.config.isChunked?Math.ceil(s.size/this.config.chunkSize):1,startTime:null,lastProgressTime:null}));this.uploadingFiles=[...this.uploadingFiles,...t];let i=new Array(this.config.maxParallelUploads).fill(null),l=t.map(async s=>{await this.waitForSlot(i,s.id);try{await this.uploadFile(s);let a=this.uploadingFiles.findIndex(n=>n.id===s.id);a!==-1&&(this.uploadingFiles[a].status="completed",this.uploadingFiles[a].progress=100,this.uploadedFiles.push({key:s.id,name:s.name,size:s.size,type:s.type,url:this.uploadingFiles[a].url}))}catch(a){if(a.name!=="AbortError"){let n=this.uploadingFiles.findIndex(r=>r.id===s.id);n!==-1&&(this.uploadingFiles[n].status="error",this.uploadingFiles[n].error=a.message),console.error("Upload error:",a)}}finally{let a=i.findIndex(n=>n===s.id);a!==-1&&(i[a]=null)}});await Promise.allSettled(l),this.uploadingFiles=this.uploadingFiles.filter(s=>s.status!=="completed"),this.uploading=this.uploadingFiles.some(s=>s.status==="uploading"||s.status==="pending"),this.updateLivewireState()},async waitForSlot(e,t){return new Promise(i=>{let l=()=>{let s=e.findIndex(a=>a===null);s!==-1?(e[s]=t,i()):setTimeout(l,100)};l()})},async uploadFile(e){let t=this.uploadingFiles.findIndex(i=>i.id===e.id);t!==-1&&(this.uploadingFiles[t].status="uploading",this.uploadingFiles[t].startTime=Date.now(),this.uploadingFiles[t].lastProgressTime=this.uploadingFiles[t].startTime),this.config.isChunked&&e.file.size>this.config.chunkSize?await this.uploadFileInChunks(e):await this.uploadFileDirectly(e)},async uploadFileInChunks(e){let t=e.file,i=Math.ceil(t.size/this.config.chunkSize);e.totalChunks=i,e.chunks=new Array(i).fill(!1);for(let l=0;l<i;l++){if(this.abortControllers.has(e.id))throw new Error("Upload cancelled");let s=l*this.config.chunkSize,a=Math.min(s+this.config.chunkSize,t.size),n=t.slice(s,a);await this.uploadChunk(e,n,l,i);let r=this.uploadingFiles.findIndex(d=>d.id===e.id);r!==-1&&(this.uploadingFiles[r].chunks[l]=!0,this.uploadingFiles[r].uploadedChunks=this.uploadingFiles[r].chunks.filter(Boolean).length,this.uploadingFiles[r].uploadedBytes=this.uploadingFiles[r].uploadedChunks*this.config.chunkSize,this.uploadingFiles[r].progress=Math.round(this.uploadingFiles[r].uploadedChunks/i*100),this.updateSpeed(this.uploadingFiles[r]))}},async uploadFileDirectly(e){let t=new FormData;t.append("file",e.file),t.append("fileKey",e.id),t.append("name",e.file.name);let i=new AbortController;this.abortControllers.set(e.id,i);try{let l=await fetch(this.config.chunkUploadUrl,{method:"POST",body:t,signal:i.signal,headers:{"X-CSRF-TOKEN":this.getCsrfToken()}});if(!l.ok)throw new Error(`HTTP ${l.status}: ${l.statusText}`);let s=await l.json();if(!s.success)throw new Error(s.message||"Upload failed");let a=this.uploadingFiles.findIndex(n=>n.id===e.id);a!==-1&&(this.uploadingFiles[a].url=s.url,this.uploadingFiles[a].progress=100,this.uploadingFiles[a].uploadedBytes=e.file.size,this.updateSpeed(this.uploadingFiles[a]))}finally{this.abortControllers.delete(e.id)}},async uploadChunk(e,t,i,l){let s=new FormData;s.append("file",t),s.append("fileKey",e.id),s.append("chunk",i),s.append("chunks",l),s.append("name",e.file.name);let a=new AbortController;this.abortControllers.set(`${e.id}_${i}`,a);try{let n=await fetch(this.config.chunkUploadUrl,{method:"POST",body:s,signal:a.signal,headers:{"X-CSRF-TOKEN":this.getCsrfToken()}});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);let r=await n.json();if(!r.success)throw new Error(r.message||"Upload failed");r.completed&&(e.url=r.url)}finally{this.abortControllers.delete(`${e.id}_${i}`)}},updateSpeed(e){let t=Date.now(),i=t-e.lastProgressTime,l=(t-e.startTime)/1e3;if(i>=500&&l>0){let s=e.uploadedBytes/l;e.speed=this.formatFileSize(s),e.lastProgressTime=t}else l>0&&!e.speed&&(e.speed="calculating...")},async cancelUpload(e){Array.from(this.abortControllers.entries()).filter(([i])=>i.startsWith(e)).map(([,i])=>i).forEach(i=>{try{i.abort()}catch(l){console.debug("Controller abort error (expected):",l)}});try{await fetch(this.config.chunkCancelUrl,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":this.getCsrfToken()},body:JSON.stringify({fileKey:e})})}catch(i){console.error("Error cancelling upload:",i)}this.uploadingFiles=this.uploadingFiles.filter(i=>i.id!==e),this.uploading=this.uploadingFiles.some(i=>i.status==="uploading"||i.status==="pending")},async cancelAllUploads(){this.abortControllers.forEach(i=>{try{i.abort()}catch(l){console.debug("Controller abort error (expected):",l)}}),this.abortControllers.clear();let t=this.uploadingFiles.filter(i=>i.status==="uploading"||i.status==="pending").map(async i=>{try{await fetch(this.config.chunkCancelUrl,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":this.getCsrfToken()},body:JSON.stringify({fileKey:i.id})})}catch(l){console.error("Error cancelling upload:",l)}});await Promise.allSettled(t),this.uploadingFiles=this.uploadingFiles.filter(i=>i.status!=="uploading"&&i.status!=="pending"),this.uploading=!1},async retryUpload(e){let t=this.uploadingFiles.findIndex(l=>l.id===e);if(t===-1)return;let i=this.uploadingFiles[t];if(i.status==="error"){this.uploadingFiles[t].status="pending",this.uploadingFiles[t].progress=0,this.uploadingFiles[t].error=null,this.uploadingFiles[t].uploadedBytes=0,this.uploadingFiles[t].uploadedChunks=0,this.uploadingFiles[t].chunks=[],this.uploadingFiles[t].speed=null,this.uploading=!0;try{await this.uploadFile(i);let l=this.uploadingFiles.findIndex(s=>s.id===e);l!==-1&&(this.uploadingFiles[l].status="completed",this.uploadingFiles[l].progress=100,this.uploadedFiles.push({key:i.id,name:i.name,size:i.size,type:i.type,url:this.uploadingFiles[l].url}))}catch(l){if(l.name!=="AbortError"){let s=this.uploadingFiles.findIndex(a=>a.id===e);s!==-1&&(this.uploadingFiles[s].status="error",this.uploadingFiles[s].error=l.message)}}this.uploading=this.uploadingFiles.some(l=>l.status==="uploading"||l.status==="pending")}},async removeFile(e){let t=this.uploadedFiles.find(i=>i.key===e);if(t)try{let i=t.url||"";if(i.includes("/storage/")){let a=i.indexOf("/storage/");i=i.substring(a+9)}console.log("Deleting file:",{fileKey:e,filePath:i,originalUrl:t.url,file:t});let l=await fetch(this.config.chunkDeleteUrl,{method:"DELETE",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":this.getCsrfToken()},body:JSON.stringify({fileKey:e,path:i})});if(!l.ok){let a=await l.text();throw new Error(`HTTP ${l.status}: ${l.statusText} - ${a}`)}let s=await l.json();if(!s.success)throw new Error(s.message||"Failed to delete file");this.uploadedFiles=this.uploadedFiles.filter(a=>a.key!==e),this.updateLivewireState()}catch(i){console.error("Error deleting file:",i),this.error=`Failed to delete file: ${i.message}`,setTimeout(()=>{this.error=null},5e3)}},updateLivewireState(){this.updatingState=!0;let e=this.uploadedFiles.map(t=>t.url&&t.url.includes("/storage/")?t.url.replace("/storage/","").split("/").pop():t.name);this.state=e,setTimeout(()=>{this.updatingState=!1},100)},cleanup(){try{this.cancelAllUploads()}catch(e){console.debug("Cleanup error (expected during page unload):",e)}},generateFileKey(){return Date.now().toString(36)+Math.random().toString(36).substring(2)},formatFileSize(e){if(e===0)return"0 Bytes";let t=1024,i=["Bytes","KB","MB","GB","TB"],l=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,l)).toFixed(2))+" "+i[l]},parseSize(e){let t={B:1,BYTES:1,KB:1024,MB:1048576,GB:1073741824,TB:1099511627776},i=e.match(/^(\d+(?:\.\d+)?)\s*(\w+)$/i);if(i){let l=parseFloat(i[1]),s=i[2].toUpperCase();return l*(t[s]||1)}return parseInt(e)||0},getCsrfToken(){return document.querySelector('meta[name="csrf-token"]')?.getAttribute("content")||""}}}export{h as default};
